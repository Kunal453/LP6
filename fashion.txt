import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
import numpy as np
import pandas as pd

(x_train, y_train), (x_test,y_test) = keras.datasets.fashion_mnist.load_data()

plt.imshow(X_train[1])
plt.imshow(X_train[0])

classes  = np.unique(y_train)
nclasses = len(classes)
print(classes)

x_train =  x_train.reshape(-1, 28, 28, 1)
x_train = x_train.astype('float32')
x_train = x_train/255.0

x_test =  x_test.reshape(-1, 28, 28, 1)
x_test = x_test.astype('float32')
x_test = x_test/255.0

from tensorflow.keras.utils import to_categorical
one_hot_y_train = to_categorical(y_train)
one_hot_y_test = to_categorical(y_test)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x_train, one_hot_y_train, test_size = 0.2, random_state=14)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D,MaxPooling2D, BatchNormalization, LeakyReLU

model = Sequential()
model.add(Conv2D(32, kernel_size=(3,3), activation = 'linear', input_shape=(28,28,1),padding='same')),
model.add(LeakyReLU(alpha=0.1)),
model.add(MaxPooling2D((2,2), padding="same")),
model.add(Dropout(0.25)),

model.add(Conv2D(64, (3,3), activation = 'linear',padding='same')),
model.add(LeakyReLU(alpha=0.1)),
model.add(MaxPooling2D((2,2), padding="same")), 
model.add(Dropout(0.25)),

model.add(Conv2D(128, (3,3), activation = 'linear',padding='same')),
model.add(LeakyReLU(alpha=0.1)),
model.add(MaxPooling2D((2,2),padding='same')), 

model.add(Flatten()),
model.add(Dense(128, activation = 'linear')),
model.add(Dropout(0.25)),
model.add(Dense(10, activation = 'softmax'))

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics='accuracy'
)
model.summary()

from re import VERBOSE
result = model.fit(
    X_train, y_train,
    batch_size= 64,
    epochs=20,
    verbose = 1, 
    validation_data = (X_test,y_test)
)

test_loss, test_acc = model.evaluate(X_test,y_test)
print("test Accuracy: ", test_acc)
