import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import io
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import tensorflow as tf

from tensorflow.keras import layers
from tensorflow import keras
from sklearn.metrics import mean_absolute_error, r2_score

df = pd.read_csv("HousingData.csv")
df

df.fillna(df.mean(),inplace=True)

df.isnull().sum()

sns.displot(df.MEDV)

sns.countplot(df.MEDV)

sns.boxplot(df.MEDV)

corr = df.corr()
corr.loc['MEDV']

fig,axes = plt.subplots(figsize=(15,12))
sns.heatmap(corr,square = True, annot=True)

X=df.iloc[:, :-1]
y = df.MEDV

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size= 0.2, random_state=42)

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

mean = X_train.mean(axis = 0)
std = X_train.std(axis = 0)
X_train = (X_train-mean)/std
X_test = (X_test-mean)/std

reg = LinearRegression()
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size= 0.2, random_state=42)
reg.fit(X_train,y_train)

y_pred = reg.predict(X_test)
from sklearn.metrics import mean_squared_error, mean_absolute_error

rmse = (np.sqrt(mean_squared_error(y_test,y_pred)))
print("rmse: ",rmse)

r2 = r2_score(y_test, y_pred)
print("r2: ",r2)

import keras
from keras.layers import Dense
from keras.models import Sequential
from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

model = Sequential()
model.add(Dense(128,activation='relu',input_dim = 13))
model.add(Dense(64,activation = 'relu'))
model.add(Dense(32,activation = 'relu'))
model.add(Dense(16,activation = 'relu'))
model.add(Dense(1))

model.compile(
    optimizer = 'adam',
    loss='mean_squared_error', metrics=['mae']
)

!pip install pydot
import pydot
keras.utils.plot_model(model, to_file='model.jpg', show_shapes=True, show_layer_names=True)

history = model.fit(X_train, y_train, epochs = 100, validation_split=0.05)

plt.plot(history.history['loss'], label='Training LOss')
plt.plot(history.history['val_loss'],label = 'validation loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

y_pred = model.predict(X_test)
mse_NN, mea_NN = model.evaluate(X_test, y_test)
print(mse_NN)
print(mea_NN)

l_model = LinearRegression()
l_model.fit(X_train, y_train)
y_pred_l = l_model.predict(X_test)
mse_l = mean_absolute_error(y_test,y_pred_l)
mae_l = mean_squared_error(y_test,y_pred_l)
print(mse_l)
print(mae_l)

r2 = r2_score(y_test,y_pred_l)
print(r2)

rmse = (np.sqrt(mean_squared_error(y_test,y_pred_l)))
print(rmse)

import sklearn

new_data = scaler.transform([[0.1, 10.0, 5.0, 0, 0.4, 6.0, 50, 6.0, 1, 400, 20, 300, 10]])
prediction = model.predict(new_data)

print(prediction)

